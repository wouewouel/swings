**********************************************************************************************************************************************************************************


[Question P1.1] Comment representez-vous ces vecteurs ? Comment sont-ils organises : quels attributs ? quelles methodes ? quels droits d'acces ? 



Ces vecteurs sont representes par les coordonnes rentres dans un tableau vector de double.
	
Attributs: 	-"coordonnees" est un tableau de double 							--> partie privee

	

Methodes:	-"dimension_ok(Vecteur autre)" renvoie true si les deux vecteurs ont les memes dimensions	--> partie privee
		  				-"dimension_3(Vecteur autre)" renvoie true si les deux vecteurs sont de dimensions 3		--> partie privee
						-->Ces 2 methodes lancent une exception dans le cas contraire

			
		
		-"augmente(double new_dim)" augmente le vecteur d'une dimension	de valeur "new_dim"		--> partie publique

		-"set_coord(unsigned int dim, double modif)" verifie si la dimensions a modifier existe et 	--> partie publique
			 			 fait la modif, dans les cas contraire, elle lance une exception				--> partie publique
						-"affiche()" affiche le coordonnees du vecteur							--> partie publique
						-"compare(Vecteur autre)" renvoie un booleens pour dire si les vecteurs sont egaux		--> partie publique
						-"getcoord() const" renvoie le tableau de double "coordonnees"					--> partie publique
						-"getvalue(size_t i)" renvoie la valeur numero i des coordonnees				--> partie publique

**********************************************************************************************************************************************************************************


[Question P1.2] Quel choix avez vous fait pour les operations entre vecteurs de dimensions differentes ?



Nous avons cree une fonction que nous appliquons a chaque fois que nous devons faire une certaine operation et qui lance une exception
de type string (peut etre devrions nous mettre une struct pour pouvoir differencier les differentes exceptions a venir...)



**********************************************************************************************************************************************************************************


[Question P4.1] Avez-vous ajoute un constructeur de copie ? Pourquoi (justifiez votre choix) ?



Oui, au cas ou l'on devrait modifier les constructeurs pour se rappeler de modifier les constructeurs de copie, si le constructeur de copie par défaut devient inefficace.


**********************************************************************************************************************************************************************************


[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnees spheriques (deux angles et une longueur) pour les vecteurs de dimension3,
a] que cela impliquerait-il au niveau des attributs de la classe ?	

Les attributs de la classe seraient des approximations
b] quelle serait la difficultÈ majeure (voire l'impossibilite) de sa rÈalisation en C++ ? 
  (C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)



La machine devra calculer les nombreux vecteurs en temps reel en fonction des angles et les vecteurs peuvent eêtre errones du fait de l'accumulation des approximations.



**********************************************************************************************************************************************************************************

[Question P4.3] Quels operateurs avez vous introduits ?

Vecteur& operator+=(const Vecteur& autre); //addition entre deux vecteurs
		

Vecteur& operator-=(const Vecteur& autre); //on fait vecteur actuel - autre
		

Vecteur operator-();//renvoie l'oppose du vecteur
			

Vecteur& operator*=(double scalaire);//multiplication scalaire
		

double operator*(Vecteur autre);//produit scalaire
		

Vecteur operator^(const Vecteur& autre); //renvoie le produit 
vectoriel

const Vecteur operator+(Vecteur,Vecteur const&); //addition
	

const Vecteur operator-(Vecteur,Vecteur const&); //soustraction
	

const Vecteur operator*(double scalaire,Vecteur v); //multiplication scalaire a gauche
	

const Vecteur operator*(Vecteur v,double scalaire); //multiplication scalaire a droite


std::ostream& operator <<(std::ostream& out,Vecteur v); //operateur d'affichage

**********************************************************************************************************************************************************************************

[Question P6.1] Comment avez vous concu votre classe Integrateur ? 

La classe Integrateur ne possede qu'une methode  < integre(Oscillateur& O, double t, double dt) > dans l'interface, par ailleurs cette methode n'est pas definie a proprement parler mais est simplement declaree car nous nous en servirons plus tard pour le polymorphisme.

**********************************************************************************************************************************************************************************

[Question P6.2] Quelle est la relation entre les classes Integrateur et IntegrateurEulerCromer ? 

IntegrateurEulerCromer  et une sous classe de la super classe Integrateur.
Ici on definit explicitement la fonction <integre(...)> et on a rajoute une fonction < affiche_evol(Oscillateur O) > qui permet de simplifier le programme de test. 

**********************************************************************************************************************************************************************************

[Question P7.1] Comment se situent ces classes par rapport a la classe Oscillateur définie la semaine passee ?



Les pendules et les ressorts sont des oscillateurs, ainsi la classe Pendule et la classe Ressort sont toutes les deux des sous classes de la super classe Oscillateur.

**********************************************************************************************************************************************************************************

[Question P8.1] En termes de POO, quelle est donc la nature de la methode dessine() ? 

La methode dessine() est une methode virtuelle pure car tous les differents objets devront la redefinir.

**********************************************************************************************************************************************************************************

La classe Systeme devra avoir une collections de differents oscillateurs possibles dont nous invoquerons, au travers de l'intÈgrateur, les ´ fonctions f ª de sorte que chacun rÈagisse suivant ses caractÈristiques propres. 
[Question P8.2] Quelle est la bonne faÁon de le faire dans un cadre de programmation orientÈe-objet ? 

Nous allons crÈer un tableau de pointeur sur Oscillateur pour verifier la deuxieme condition du polymorphisme.

**********************************************************************************************************************************************************************************

[Question P8.3] A quoi faut-il faire attention pour les classes contenant des pointeurs ? Quelles solutions peut-on envisager ? 
Il faut bien liberer ces pointeurs une fois l'utilisation terminee, et faire attention que chaque pointeur pointe sur un unique oscillateur. 
On utilisera donc des unique_ptr.

**********************************************************************************************************************************************************************************

[Question P8.4] Comment reprÈsentez vous la classe Systeme ?
Expliquez votre conception (attributs, interface, ...). 

Il s'agit d'une sous classe de la super classe Dessinable,
elle possede un tableau de pointeurs sur des oscillateurs en prive,
ainsi que la definition de la methode <dessine()>
Elle possède aussi une méthode évolue qui fait avancer chaque oscillateur d'un pas de temps ainsi qu'une méthode ajoute pour ajouter un pointeur vers un oscillateur au tableau des pointeurs.

**********************************************************************************************************************************************************************************

[Question P11.1] Comment representez-vous ces nouveaux oscillateurs ? Ou s'incrivent-ils dans votre conception ? 

On implemente le nouvel oscillateur "Double ressort".

**********************************************************************************************************************************************************************************

[Question P12.1] Comment implémentez-vous la possibilité de tracer les trajectoires dans l'espace des phases ? 


**********************************************************************************************************************************************************************************

[Question P13.1] Où cela s'intègre-t-il dans votre projet/conception ? Quels changements cela engendre ? 


**********************************************************************************************************************************************************************************

